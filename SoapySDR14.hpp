
#pragma once
#include <SoapySDR/Device.hpp>
#include "SocketDefs.h"
#include <cstring>
#include <mutex>
#include <thread>
#include <ftdi.h>
#include <boost/circular_buffer.hpp>

class interfaceInformation{

public:
	std::string name;
	std::string address;
	std::string broadcast;
};

std::vector<interfaceInformation> interfaceList();

class SoapySDR14 : public SoapySDR::Device
{
public:
    SoapySDR14(const SoapySDR::Kwargs &args);
    ~SoapySDR14(void);

    /*******************************************************************
     * Identification API
     ******************************************************************/
    std::string getDriverKey(void) const;

    std::string getHardwareKey(void) const;

    SoapySDR::Kwargs getHardwareInfo(void) const;

    /*******************************************************************
     * Channels API
     ******************************************************************/
    size_t getNumChannels(const int direction) const;

    bool getFullDuplex(const int direction, const size_t channel) const;

    /*******************************************************************
     * Stream API
     ******************************************************************/
    std::vector<std::string> getStreamFormats(const int direction, const size_t channel) const;

    std::string getNativeStreamFormat(const int direction, const size_t channel, double &fullScale) const;

    SoapySDR::Stream *setupStream(
        const int direction,
        const std::string &format,
        const std::vector<size_t> &channels,
        const SoapySDR::Kwargs &args);

    void closeStream(SoapySDR::Stream *stream);

    size_t getStreamMTU(SoapySDR::Stream *stream) const;

    int activateStream(
        SoapySDR::Stream *stream,
        const int flags,
        const long long timeNs,
        const size_t numElems);

    int deactivateStream(
        SoapySDR::Stream *stream,
        const int flags,
        const long long timeNs);

    int readStream(
        SoapySDR::Stream *stream,
        void * const *buffs,
        const size_t numElems,
        int &flags,
        long long &timeNs,
        const long timeoutUs);

    /*******************************************************************
     * Antenna API
     ******************************************************************/
    std::vector<std::string> listAntennas(const int direction, const size_t channel) const;

    void setAntenna(const int direction, const size_t channel, const std::string &name);

    std::string getAntenna(const int direction, const size_t channel) const;

    /*******************************************************************
     * Frontend corrections API
     ******************************************************************/
    // bool hasFrequencyCorrection(const int direction, const size_t channel) const;

    // void setFrequencyCorrection(const int direction, const size_t channel, const double value);

    // double getFrequencyCorrection(const int direction, const size_t channel) const;

    /*******************************************************************
     * Gain API
     ******************************************************************/
    std::vector<std::string> listGains(const int direction, const size_t channel) const;

    //bool hasGainMode(const int direction, const size_t channel) const;

    void setGainMode(const int direction, const size_t channel, const bool automatic);

    bool getGainMode(const int direction, const size_t channel) const;

    void setGain(const int direction, const size_t channel, const double value);

    void setGain(const int direction, const size_t channel, const std::string &name, const double value);

    double getGain(const int direction, const size_t channel) ;

    double getGain(const int direction, const size_t channel, const std::string &name) ;

    SoapySDR::Range getGainRange(const int direction, const size_t channel) const;

    SoapySDR::Range getGainRange(const int direction, const size_t channel, const std::string &name) const;

    /*******************************************************************
     * Frequency API
     ******************************************************************/
    void setFrequency(const int direction, const size_t channel, const double frequency, const SoapySDR::Kwargs &args);

    void setFrequency(const int direction, const size_t channel, const std::string &name, const double frequency, const SoapySDR::Kwargs &args);

    double getFrequency(const int direction, const size_t channel);

    double getFrequency(const int direction, const size_t channel, const std::string &name);

    std::vector<std::string> listFrequencies(const int direction, const size_t channel) const;

    SoapySDR::RangeList getFrequencyRange(const int direction, const size_t channel) const;

    SoapySDR::RangeList getFrequencyRange(const int direction, const size_t channel, const std::string &name) const;

    SoapySDR::RangeList getFrequencyRange2(const int direction, const size_t channel);

    SoapySDR::RangeList getFrequencyRange2(const int direction, const size_t channel, const std::string &name);

    /*******************************************************************
     * Sample Rate API
     ******************************************************************/
    void setSampleRate(const int direction, const size_t channel, const double rate);

    double getSampleRate(const int direction, const size_t channel) const;

    std::vector<double> listSampleRates(const int direction, const size_t channel) const;

    //SoapySDR::RangeList getSampleRateRange(const int direction, const size_t channel) const;

    /*******************************************************************
     * Bandwidth API
     ******************************************************************/
    void setBandwidth(const int direction, const size_t channel, const double bw);

    double getBandwidth(const int direction, const size_t channel) const;

    std::vector<double> listBandwidths(const int direction, const size_t channel) const;

    //SoapySDR::RangeList getBandwidthRange(const int direction, const size_t channel) const;

    bool transaction( const unsigned char *cmd, size_t size );

  	bool transaction( const unsigned char *cmd, size_t size,
                    std::vector< unsigned char > &response );

   	bool start();

	bool stop();

	int processUDP(float *data);

    ftdi_context *_ftdi;
    std::thread _thread;
    bool _run_usb_read_task;
    bool _run_tcp_keepalive_task;


    typedef std::complex<float> gr_complex;
    boost::circular_buffer<gr_complex> *_fifo;
    std::mutex _fifo_lock;
    std::condition_variable _samp_avail;

    std::vector< unsigned char > _resp;
    std::mutex _resp_lock;
    std::condition_variable _resp_avail;

private:
    mutable std::mutex	_device_mutex;
    std::mutex	_tcp_lock;

  bool _running;
  bool _keep_running;
  uint16_t _sequence;

  size_t _nchan;
  double _sample_rate;
  double _bandwidth;

  double _gain;

  SoapySDR::RangeList _list;

  size_t read_bytes( char *data, size_t size, bool &run );
  void usb_read_task();
  bool ack();
  bool setDsp();


  SoapySDR::Stream* const RX_STREAM = (SoapySDR::Stream*) 0x2;

    // a udp packet has up to 256 x 4 byte or 240 x 6 byte elements
	float datasave[256 * 2];
	size_t datacount;
	size_t datasize;

};

//sdr-14 needs AD6620 program
const std::array<std::array<unsigned char, 9>, 267> BWKHZ_150 = {{
        {0x09,0xA0,0x00,0x03,0x09,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x01,0x03,0x06,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x05,0x03,0x03,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x06,0x03,0x04,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x07,0x03,0x14,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x08,0x03,0x1B,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x09,0x03,0x04,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x0A,0x03,0x02,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x0B,0x03,0x00,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x0C,0x03,0xFF,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x00,0x00,0x50,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x01,0x00,0x08,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0x02,0x00,0x23,0xFA,0xFF,0xFF,0x00},
        {0x09,0xA0,0x03,0x00,0x36,0xF6,0xFF,0xFF,0x00},
        {0x09,0xA0,0x04,0x00,0x35,0xF8,0xFF,0xFF,0x00},
        {0x09,0xA0,0x05,0x00,0x2B,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0x06,0x00,0xE1,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x07,0x00,0xD9,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0x08,0x00,0x29,0x04,0x00,0x00,0x00},
        {0x09,0xA0,0x09,0x00,0xDA,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x0A,0x00,0xB7,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0x0B,0x00,0x7F,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0x0C,0x00,0x9D,0xFE,0xFF,0xFF,0x00},
        {0x09,0xA0,0x0D,0x00,0x93,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0x0E,0x00,0x2B,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0x0F,0x00,0xB0,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0x10,0x00,0xD4,0xFE,0xFF,0xFF,0x00},
        {0x09,0xA0,0x11,0x00,0xF7,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0x12,0x00,0x08,0xFE,0xFF,0xFF,0x00},
        {0x09,0xA0,0x13,0x00,0xDD,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x14,0x00,0x03,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0x15,0x00,0x49,0x02,0x00,0x00,0x00},
        {0x09,0xA0,0x16,0x00,0x6F,0xFF,0xFF,0xFF,0x00},
        {0x09,0xA0,0x17,0x00,0xF8,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0x18,0x00,0x5C,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0x19,0x00,0x3D,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x1A,0x00,0x0F,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0x1B,0x00,0x09,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0x1C,0x00,0x24,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x1D,0x00,0xF0,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0x1E,0x00,0x8C,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0x1F,0x00,0x6B,0xFF,0xFF,0xFF,0x00},
        {0x09,0xA0,0x20,0x00,0x06,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0x21,0x00,0xE4,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0x22,0x00,0x17,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0x23,0x00,0x13,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0x24,0x00,0xAC,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0x25,0x00,0x55,0xFE,0xFF,0xFF,0x00},
        {0x09,0xA0,0x26,0x00,0xC2,0x02,0x00,0x00,0x00},
        {0x09,0xA0,0x27,0x00,0xC1,0x04,0x00,0x00,0x00},
        {0x09,0xA0,0x28,0x00,0x4F,0x02,0x00,0x00,0x00},
        {0x09,0xA0,0x29,0x00,0x7F,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0x2A,0x00,0xD7,0xFA,0xFF,0xFF,0x00},
        {0x09,0xA0,0x2B,0x00,0xFC,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0x2C,0x00,0x29,0x02,0x00,0x00,0x00},
        {0x09,0xA0,0x2D,0x00,0x87,0x05,0x00,0x00,0x00},
        {0x09,0xA0,0x2E,0x00,0xC8,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0x2F,0x00,0x4B,0xFE,0xFF,0xFF,0x00},
        {0x09,0xA0,0x30,0x00,0x28,0xFA,0xFF,0xFF,0x00},
        {0x09,0xA0,0x31,0x00,0x67,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0x32,0x00,0x25,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0x33,0x00,0x18,0x06,0x00,0x00,0x00},
        {0x09,0xA0,0x34,0x00,0x76,0x05,0x00,0x00,0x00},
        {0x09,0xA0,0x35,0x00,0x89,0xFF,0xFF,0xFF,0x00},
        {0x09,0xA0,0x36,0x00,0xBE,0xF9,0xFF,0xFF,0x00},
        {0x09,0xA0,0x37,0x00,0xA4,0xF9,0xFF,0xFF,0x00},
        {0x09,0xA0,0x38,0x00,0xA9,0xFF,0xFF,0xFF,0x00},
        {0x09,0xA0,0x39,0x00,0x54,0x06,0x00,0x00,0x00},
        {0x09,0xA0,0x3A,0x00,0x47,0x07,0x00,0x00,0x00},
        {0x09,0xA0,0x3B,0x00,0x45,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0x3C,0x00,0xB8,0xF9,0xFF,0xFF,0x00},
        {0x09,0xA0,0x3D,0x00,0xCB,0xF7,0xFF,0xFF,0x00},
        {0x09,0xA0,0x3E,0x00,0xAA,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0x3F,0x00,0x1A,0x06,0x00,0x00,0x00},
        {0x09,0xA0,0x40,0x00,0x23,0x09,0x00,0x00,0x00},
        {0x09,0xA0,0x41,0x00,0x89,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0x42,0x00,0x3A,0xFA,0xFF,0xFF,0x00},
        {0x09,0xA0,0x43,0x00,0xF5,0xF5,0xFF,0xFF,0x00},
        {0x09,0xA0,0x44,0x00,0x21,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0x45,0x00,0x46,0x05,0x00,0x00,0x00},
        {0x09,0xA0,0x46,0x00,0xE9,0x0A,0x00,0x00,0x00},
        {0x09,0xA0,0x47,0x00,0x58,0x06,0x00,0x00,0x00},
        {0x09,0xA0,0x48,0x00,0x69,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0x49,0x00,0x47,0xF4,0xFF,0xFF,0x00},
        {0x09,0xA0,0x4A,0x00,0x0C,0xF8,0xFF,0xFF,0x00},
        {0x09,0xA0,0x4B,0x00,0xB3,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0x4C,0x00,0x76,0x0C,0x00,0x00,0x00},
        {0x09,0xA0,0x4D,0x00,0xB4,0x09,0x00,0x00,0x00},
        {0x09,0xA0,0x4E,0x00,0x6C,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0x4F,0x00,0xE7,0xF2,0xFF,0xFF,0x00},
        {0x09,0xA0,0x50,0x00,0x69,0xF4,0xFF,0xFF,0x00},
        {0x09,0xA0,0x51,0x00,0x33,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0x52,0x00,0x9C,0x0D,0x00,0x00,0x00},
        {0x09,0xA0,0x53,0x00,0x9E,0x0D,0x00,0x00,0x00},
        {0x09,0xA0,0x54,0x00,0x76,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x55,0x00,0x09,0xF2,0xFF,0xFF,0x00},
        {0x09,0xA0,0x56,0x00,0x36,0xF0,0xFF,0xFF,0x00},
        {0x09,0xA0,0x57,0x00,0x8E,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0x58,0x00,0x23,0x0E,0x00,0x00,0x00},
        {0x09,0xA0,0x59,0x00,0x1D,0x12,0x00,0x00,0x00},
        {0x09,0xA0,0x5A,0x00,0xCB,0x04,0x00,0x00,0x00},
        {0x09,0xA0,0x5B,0x00,0xEA,0xF1,0xFF,0xFF,0x00},
        {0x09,0xA0,0x5C,0x00,0x67,0xEB,0xFF,0xFF,0x00},
        {0x09,0xA0,0x5D,0x00,0x70,0xF8,0xFF,0xFF,0x00},
        {0x09,0xA0,0x5E,0x00,0xC3,0x0D,0x00,0x00,0x00},
        {0x09,0xA0,0x5F,0x00,0x44,0x17,0x00,0x00,0x00},
        {0x09,0xA0,0x60,0x00,0xD7,0x0A,0x00,0x00,0x00},
        {0x09,0xA0,0x61,0x00,0xE6,0xF2,0xFF,0xFF,0x00},
        {0x09,0xA0,0x62,0x00,0xDA,0xE5,0xFF,0xFF,0x00},
        {0x09,0xA0,0x63,0x00,0x46,0xF1,0xFF,0xFF,0x00},
        {0x09,0xA0,0x64,0x00,0x08,0x0C,0x00,0x00,0x00},
        {0x09,0xA0,0x65,0x00,0x4D,0x1D,0x00,0x00,0x00},
        {0x09,0xA0,0x66,0x00,0x65,0x13,0x00,0x00,0x00},
        {0x09,0xA0,0x67,0x00,0x93,0xF5,0xFF,0xFF,0x00},
        {0x09,0xA0,0x68,0x00,0x32,0xDF,0xFF,0xFF,0x00},
        {0x09,0xA0,0x69,0x00,0xE6,0xE6,0xFF,0xFF,0x00},
        {0x09,0xA0,0x6A,0x00,0x1C,0x08,0x00,0x00,0x00},
        {0x09,0xA0,0x6B,0x00,0xCE,0x24,0x00,0x00,0x00},
        {0x09,0xA0,0x6C,0x00,0x40,0x20,0x00,0x00,0x00},
        {0x09,0xA0,0x6D,0x00,0x35,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0x6E,0x00,0x75,0xD6,0xFF,0xFF,0x00},
        {0x09,0xA0,0x6F,0x00,0x6E,0xD6,0xFF,0xFF,0x00},
        {0x09,0xA0,0x70,0x00,0xF5,0xFF,0xFF,0xFF,0x00},
        {0x09,0xA0,0x71,0x00,0x77,0x2F,0x00,0x00,0x00},
        {0x09,0xA0,0x72,0x00,0x69,0x36,0x00,0x00,0x00},
        {0x09,0xA0,0x73,0x00,0x6D,0x07,0x00,0x00,0x00},
        {0x09,0xA0,0x74,0x00,0x90,0xC8,0xFF,0xFF,0x00},
        {0x09,0xA0,0x75,0x00,0x58,0xB6,0xFF,0xFF,0x00},
        {0x09,0xA0,0x76,0x00,0x44,0xEC,0xFF,0xFF,0x00},
        {0x09,0xA0,0x77,0x00,0x6E,0x43,0x00,0x00,0x00},
        {0x09,0xA0,0x78,0x00,0xB0,0x6A,0x00,0x00,0x00},
        {0x09,0xA0,0x79,0x00,0xF3,0x2B,0x00,0x00,0x00},
        {0x09,0xA0,0x7A,0x00,0x40,0xA7,0xFF,0xFF,0x00},
        {0x09,0xA0,0x7B,0x00,0xD6,0x4C,0xFF,0xFF,0x00},
        {0x09,0xA0,0x7C,0x00,0x2C,0x90,0xFF,0xFF,0x00},
        {0x09,0xA0,0x7D,0x00,0xA5,0x89,0x00,0x00,0x00},
        {0x09,0xA0,0x7E,0x00,0x84,0xD1,0x01,0x00,0x00},
        {0x09,0xA0,0x7F,0x00,0x11,0xB8,0x02,0x00,0x00},
        {0x09,0xA0,0x80,0x00,0x11,0xB8,0x02,0x00,0x00},
        {0x09,0xA0,0x81,0x00,0x84,0xD1,0x01,0x00,0x00},
        {0x09,0xA0,0x82,0x00,0xA5,0x89,0x00,0x00,0x00},
        {0x09,0xA0,0x83,0x00,0x2C,0x90,0xFF,0xFF,0x00},
        {0x09,0xA0,0x84,0x00,0xD6,0x4C,0xFF,0xFF,0x00},
        {0x09,0xA0,0x85,0x00,0x40,0xA7,0xFF,0xFF,0x00},
        {0x09,0xA0,0x86,0x00,0xF3,0x2B,0x00,0x00,0x00},
        {0x09,0xA0,0x87,0x00,0xB0,0x6A,0x00,0x00,0x00},
        {0x09,0xA0,0x88,0x00,0x6E,0x43,0x00,0x00,0x00},
        {0x09,0xA0,0x89,0x00,0x44,0xEC,0xFF,0xFF,0x00},
        {0x09,0xA0,0x8A,0x00,0x58,0xB6,0xFF,0xFF,0x00},
        {0x09,0xA0,0x8B,0x00,0x90,0xC8,0xFF,0xFF,0x00},
        {0x09,0xA0,0x8C,0x00,0x6D,0x07,0x00,0x00,0x00},
        {0x09,0xA0,0x8D,0x00,0x69,0x36,0x00,0x00,0x00},
        {0x09,0xA0,0x8E,0x00,0x77,0x2F,0x00,0x00,0x00},
        {0x09,0xA0,0x8F,0x00,0xF5,0xFF,0xFF,0xFF,0x00},
        {0x09,0xA0,0x90,0x00,0x6E,0xD6,0xFF,0xFF,0x00},
        {0x09,0xA0,0x91,0x00,0x75,0xD6,0xFF,0xFF,0x00},
        {0x09,0xA0,0x92,0x00,0x35,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0x93,0x00,0x40,0x20,0x00,0x00,0x00},
        {0x09,0xA0,0x94,0x00,0xCE,0x24,0x00,0x00,0x00},
        {0x09,0xA0,0x95,0x00,0x1C,0x08,0x00,0x00,0x00},
        {0x09,0xA0,0x96,0x00,0xE6,0xE6,0xFF,0xFF,0x00},
        {0x09,0xA0,0x97,0x00,0x32,0xDF,0xFF,0xFF,0x00},
        {0x09,0xA0,0x98,0x00,0x93,0xF5,0xFF,0xFF,0x00},
        {0x09,0xA0,0x99,0x00,0x65,0x13,0x00,0x00,0x00},
        {0x09,0xA0,0x9A,0x00,0x4D,0x1D,0x00,0x00,0x00},
        {0x09,0xA0,0x9B,0x00,0x08,0x0C,0x00,0x00,0x00},
        {0x09,0xA0,0x9C,0x00,0x46,0xF1,0xFF,0xFF,0x00},
        {0x09,0xA0,0x9D,0x00,0xDA,0xE5,0xFF,0xFF,0x00},
        {0x09,0xA0,0x9E,0x00,0xE6,0xF2,0xFF,0xFF,0x00},
        {0x09,0xA0,0x9F,0x00,0xD7,0x0A,0x00,0x00,0x00},
        {0x09,0xA0,0xA0,0x00,0x44,0x17,0x00,0x00,0x00},
        {0x09,0xA0,0xA1,0x00,0xC3,0x0D,0x00,0x00,0x00},
        {0x09,0xA0,0xA2,0x00,0x70,0xF8,0xFF,0xFF,0x00},
        {0x09,0xA0,0xA3,0x00,0x67,0xEB,0xFF,0xFF,0x00},
        {0x09,0xA0,0xA4,0x00,0xEA,0xF1,0xFF,0xFF,0x00},
        {0x09,0xA0,0xA5,0x00,0xCB,0x04,0x00,0x00,0x00},
        {0x09,0xA0,0xA6,0x00,0x1D,0x12,0x00,0x00,0x00},
        {0x09,0xA0,0xA7,0x00,0x23,0x0E,0x00,0x00,0x00},
        {0x09,0xA0,0xA8,0x00,0x8E,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0xA9,0x00,0x36,0xF0,0xFF,0xFF,0x00},
        {0x09,0xA0,0xAA,0x00,0x09,0xF2,0xFF,0xFF,0x00},
        {0x09,0xA0,0xAB,0x00,0x76,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0xAC,0x00,0x9E,0x0D,0x00,0x00,0x00},
        {0x09,0xA0,0xAD,0x00,0x9C,0x0D,0x00,0x00,0x00},
        {0x09,0xA0,0xAE,0x00,0x33,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0xAF,0x00,0x69,0xF4,0xFF,0xFF,0x00},
        {0x09,0xA0,0xB0,0x00,0xE7,0xF2,0xFF,0xFF,0x00},
        {0x09,0xA0,0xB1,0x00,0x6C,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0xB2,0x00,0xB4,0x09,0x00,0x00,0x00},
        {0x09,0xA0,0xB3,0x00,0x76,0x0C,0x00,0x00,0x00},
        {0x09,0xA0,0xB4,0x00,0xB3,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0xB5,0x00,0x0C,0xF8,0xFF,0xFF,0x00},
        {0x09,0xA0,0xB6,0x00,0x47,0xF4,0xFF,0xFF,0x00},
        {0x09,0xA0,0xB7,0x00,0x69,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0xB8,0x00,0x58,0x06,0x00,0x00,0x00},
        {0x09,0xA0,0xB9,0x00,0xE9,0x0A,0x00,0x00,0x00},
        {0x09,0xA0,0xBA,0x00,0x46,0x05,0x00,0x00,0x00},
        {0x09,0xA0,0xBB,0x00,0x21,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0xBC,0x00,0xF5,0xF5,0xFF,0xFF,0x00},
        {0x09,0xA0,0xBD,0x00,0x3A,0xFA,0xFF,0xFF,0x00},
        {0x09,0xA0,0xBE,0x00,0x89,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0xBF,0x00,0x23,0x09,0x00,0x00,0x00},
        {0x09,0xA0,0xC0,0x00,0x1A,0x06,0x00,0x00,0x00},
        {0x09,0xA0,0xC1,0x00,0xAA,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0xC2,0x00,0xCB,0xF7,0xFF,0xFF,0x00},
        {0x09,0xA0,0xC3,0x00,0xB8,0xF9,0xFF,0xFF,0x00},
        {0x09,0xA0,0xC4,0x00,0x45,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0xC5,0x00,0x47,0x07,0x00,0x00,0x00},
        {0x09,0xA0,0xC6,0x00,0x54,0x06,0x00,0x00,0x00},
        {0x09,0xA0,0xC7,0x00,0xA9,0xFF,0xFF,0xFF,0x00},
        {0x09,0xA0,0xC8,0x00,0xA4,0xF9,0xFF,0xFF,0x00},
        {0x09,0xA0,0xC9,0x00,0xBE,0xF9,0xFF,0xFF,0x00},
        {0x09,0xA0,0xCA,0x00,0x89,0xFF,0xFF,0xFF,0x00},
        {0x09,0xA0,0xCB,0x00,0x76,0x05,0x00,0x00,0x00},
        {0x09,0xA0,0xCC,0x00,0x18,0x06,0x00,0x00,0x00},
        {0x09,0xA0,0xCD,0x00,0x25,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0xCE,0x00,0x67,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0xCF,0x00,0x28,0xFA,0xFF,0xFF,0x00},
        {0x09,0xA0,0xD0,0x00,0x4B,0xFE,0xFF,0xFF,0x00},
        {0x09,0xA0,0xD1,0x00,0xC8,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0xD2,0x00,0x87,0x05,0x00,0x00,0x00},
        {0x09,0xA0,0xD3,0x00,0x29,0x02,0x00,0x00,0x00},
        {0x09,0xA0,0xD4,0x00,0xFC,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0xD5,0x00,0xD7,0xFA,0xFF,0xFF,0x00},
        {0x09,0xA0,0xD6,0x00,0x7F,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0xD7,0x00,0x4F,0x02,0x00,0x00,0x00},
        {0x09,0xA0,0xD8,0x00,0xC1,0x04,0x00,0x00,0x00},
        {0x09,0xA0,0xD9,0x00,0xC2,0x02,0x00,0x00,0x00},
        {0x09,0xA0,0xDA,0x00,0x55,0xFE,0xFF,0xFF,0x00},
        {0x09,0xA0,0xDB,0x00,0xAC,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0xDC,0x00,0x13,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0xDD,0x00,0x17,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0xDE,0x00,0xE4,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0xDF,0x00,0x06,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0xE0,0x00,0x6B,0xFF,0xFF,0xFF,0x00},
        {0x09,0xA0,0xE1,0x00,0x8C,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0xE2,0x00,0xF0,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0xE3,0x00,0x24,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0xE4,0x00,0x09,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0xE5,0x00,0x0F,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0xE6,0x00,0x3D,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0xE7,0x00,0x5C,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0xE8,0x00,0xF8,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0xE9,0x00,0x6F,0xFF,0xFF,0xFF,0x00},
        {0x09,0xA0,0xEA,0x00,0x49,0x02,0x00,0x00,0x00},
        {0x09,0xA0,0xEB,0x00,0x03,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0xEC,0x00,0xDD,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0xED,0x00,0x08,0xFE,0xFF,0xFF,0x00},
        {0x09,0xA0,0xEE,0x00,0xF7,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0xEF,0x00,0xD4,0xFE,0xFF,0xFF,0x00},
        {0x09,0xA0,0xF0,0x00,0xB0,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0xF1,0x00,0x2B,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0xF2,0x00,0x93,0x01,0x00,0x00,0x00},
        {0x09,0xA0,0xF3,0x00,0x9D,0xFE,0xFF,0xFF,0x00},
        {0x09,0xA0,0xF4,0x00,0x7F,0xFC,0xFF,0xFF,0x00},
        {0x09,0xA0,0xF5,0x00,0xB7,0xFD,0xFF,0xFF,0x00},
        {0x09,0xA0,0xF6,0x00,0xDA,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0xF7,0x00,0x29,0x04,0x00,0x00,0x00},
        {0x09,0xA0,0xF8,0x00,0xD9,0x03,0x00,0x00,0x00},
        {0x09,0xA0,0xF9,0x00,0xE1,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0xFA,0x00,0x2B,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0xFB,0x00,0x35,0xF8,0xFF,0xFF,0x00},
        {0x09,0xA0,0xFC,0x00,0x36,0xF6,0xFF,0xFF,0x00},
        {0x09,0xA0,0xFD,0x00,0x23,0xFA,0xFF,0xFF,0x00},
        {0x09,0xA0,0xFE,0x00,0x08,0xFB,0xFF,0xFF,0x00},
        {0x09,0xA0,0xFF,0x00,0x50,0x00,0x00,0x00,0x00},
        {0x09,0xA0,0x00,0x03,0x08,0x00,0x00,0x00,0x00}
}};
